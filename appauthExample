import android.content.Intent
import android.net.Uri
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import androidx.browser.customtabs.CustomTabsIntent
import net.openid.appauth.*
import PKCEUtil.PKCEData

class MainActivity : AppCompatActivity() {

    private lateinit var authService: AuthorizationService

    private val authRequestLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
        val data = result.data
        val response = AuthorizationResponse.fromIntent(data!!)
        val error = AuthorizationException.fromIntent(data)

        // Handle the response and error accordingly
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        authService = AuthorizationService(this)

        val pkceData: PKCEData = PKCEUtil.generatePKCEData()
        startAuthFlow(pkceData)
    }

    private fun startAuthFlow(pkceData: PKCEData) {
        val config: AuthorizationServiceConfiguration = createAuthConfig()

        val authRequest = AuthorizationRequest.Builder(
            config,
            getString(R.string.client_id),
            ResponseTypeValues.CODE,
            Uri.parse(getString(R.string.redirect_uri))
        ).apply {
            setScopes("openid", "email", "profile")
            setCodeVerifier(pkceData.codeVerifier, pkceData.codeChallenge, pkceData.codeChallengeMethod)
        }.build()

        val customTabsIntentBuilder = authService.createCustomTabsIntentBuilder(authRequest.toUri())
        val customTabsIntent = customTabsIntentBuilder.build()

        val intent = authService.getAuthorizationRequestIntent(authRequest, customTabsIntent)
        authRequestLauncher.launch(intent)
    }

    private fun createAuthConfig(): AuthorizationServiceConfiguration {
        val authEndpoint = Uri.parse(getString(R.string.authorization_endpoint_uri))
        val tokenEndpoint = Uri.parse(getString(R.string.token_endpoint_uri))
        return AuthorizationServiceConfiguration(authEndpoint, tokenEndpoint)
    }
}
