class CustomAuthorizationService(
    private val configuration: CustomAuthorizationServiceConfiguration,
    private val httpClient: HttpClient
) {

    suspend fun authorize(request: CustomAuthorizationRequest): CustomAuthorizationResponse {
        // Implement your custom authorization logic here.
        // For example, you can use the httpClient to send a request to the authorization server.
    }

    // Add any other custom methods required for your authorization service.
}
class CustomAuthorizationServiceConfiguration(
    val issuer: String,
    val authorizationEndpoint: String,
    val tokenEndpoint: String
) {

    companion object {
        fun fromJson(json: String): CustomAuthorizationServiceConfiguration {
            val jsonObject = JSONObject(json)
            return CustomAuthorizationServiceConfiguration(
                issuer = jsonObject.getString("issuer"),
                authorizationEndpoint = jsonObject.getString("authorizationEndpoint"),
                tokenEndpoint = jsonObject.getString("tokenEndpoint")
            )
        }
    }

    // Add any other custom configuration properties required for your authorization service.
}
class CustomAuthorizationRequest(
    val clientId: String,
    val responseType: String,
    val redirectUri: String,
    val scope: String,
    val state: String?,
    val nonce: String?,
    val codeChallenge: String?,
    val codeChallengeMethod: String?,
    val additionalParameters: Map<String, String>?
) {

      class Builder(
            private val serviceConfig: CustomAuthorizationServiceConfiguration,
            private val clientId: String,
            private val responseType: String,
            private val redirectUri: String
        ) {
            // Builder properties
            private var scope: String? = null
            private var state: String? = null
            private var nonce: String? = null
            private var codeChallenge: String? = null
            private var codeChallengeMethod: String? = null
            private var additionalParameters: MutableMap<String, String> = mutableMapOf()

            // Builder methods
            fun setScope(scope: String) = apply { this.scope = scope }
            fun setState(state: String?) = apply { this.state = state }
            fun setNonce(nonce: String?) = apply { this.nonce = nonce }
            fun setCodeChallenge(codeChallenge: String, codeChallengeMethod: String) = apply {
                this.codeChallenge = codeChallenge
                this.codeChallengeMethod = codeChallengeMethod
            }
            fun setAdditionalParameters(additionalParameters: Map<String, String>) = apply {
                this.additionalParameters.putAll(additionalParameters)
            }

            fun build(): CustomAuthorizationRequest {
                return CustomAuthorizationRequest(
                    clientId,
                    responseType,
                    redirectUri,
                    scope ?: "",
                    state,
                    nonce,
                    codeChallenge,
                    codeChallengeMethod,
                    additionalParameters
                )
            }
        }
    }
    Update the createAuthRequest function to use the new CustomAuthorizationRequest.Builder:
    kotlin
    Copy code
    private suspend fun createAuthRequest(
        service


fun generateAuthUrl(authRequest: CustomAuthorizationRequest): String {
    val baseUrl = authRequest.serviceConfig.authorizationEndpoint.toString()
    val clientId = URLEncoder.encode(authRequest.clientId, "UTF-8")
    val responseType = authRequest.responseType.toString()
    val redirectUri = URLEncoder.encode(authRequest.redirectUri.toString(), "UTF-8")
    val scope = URLEncoder.encode(authRequest.scope, "UTF-8")

    val additionalParams = authRequest.additionalParameters.map { (key, value) ->
        "${URLEncoder.encode(key, "UTF-8")}=${URLEncoder.encode(value, "UTF-8")}"
    }.joinToString("&")

    val authUrlBuilder = StringBuilder("$baseUrl?client_id=$clientId&response_type=$responseType&redirect_uri=$redirectUri&scope=$scope")

    if (authRequest.state != null) {
        authUrlBuilder.append("&state=${URLEncoder.encode(authRequest.state, "UTF-8")}")
    }

    if (authRequest.nonce != null) {
        authUrlBuilder.append("&nonce=${URLEncoder.encode(authRequest.nonce, "UTF-8")}")
    }

    if (authRequest.codeChallenge != null) {
        authUrlBuilder.append("&code_challenge=${URLEncoder.encode(authRequest.codeChallenge, "UTF-8")}")
        authUrlBuilder.append("&code_challenge_method=${URLEncoder.encode(authRequest.codeChallengeMethod, "UTF-8")}")
    }

    if (additionalParams.isNotEmpty()) {
        authUrlBuilder.append("&$additionalParams")
    }

    return authUrlBuilder.toString()
}
